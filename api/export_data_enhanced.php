<?php
require_once 'db.php';

header('Content-Type: application/json');
header('Access-Control-Allow-Origin: *');
header('Access-Control-Allow-Methods: GET, POST, OPTIONS');
header('Access-Control-Allow-Headers: Content-Type, Authorization');

if ($_SERVER['REQUEST_METHOD'] === 'OPTIONS') {
    exit(0);
}

/* ---------------------- HELPER FUNCTIONS ---------------------- */

function generateCSV($data, $headers) {
    // Output headers
    $output = fopen('php://output', 'w');

    // Add UTF-8 BOM for Excel compatibility
    fprintf($output, chr(0xEF).chr(0xBB).chr(0xBF));

    // Write header row
    fputcsv($output, $headers);

    // Write data rows
    foreach ($data as $row) {
        $csvRow = [];
        foreach ($headers as $header) {
            $key = strtolower(str_replace(' ', '_', $header));
            $value = isset($row[$key]) ? $row[$key] : '';

            // Format date fields for Excel compatibility
            if (in_array($header, ['Created At', 'Updated At']) && !empty($value)) {
                // Convert MySQL datetime to Excel-friendly format
                $timestamp = strtotime($value);
                if ($timestamp) {
                    // Use a format that Excel can recognize as a date
                    $value = date('m/d/Y H:i:s', $timestamp);
                }
            }

            $csvRow[] = $value;
        }
        fputcsv($output, $csvRow);
    }

    fclose($output);
}

function generateExcel($data, $headers, $filename) {
    require '../vendor/autoload.php';

    $spreadsheet = new \PhpOffice\PhpSpreadsheet\Spreadsheet();
    $sheet = $spreadsheet->getActiveSheet();

    // Set document properties
    $spreadsheet->getProperties()
        ->setCreator('HazardTrack System')
        ->setLastModifiedBy('HazardTrack System')
        ->setTitle('Data Export')
        ->setSubject('Exported Data')
        ->setDescription('Generated by HazardTrack System on ' . date('Y-m-d H:i:s'));

    // Set sheet title
    $sheet->setTitle('Export Data');

    // Style for header row
    $headerStyle = [
        'font' => [
            'bold' => true,
            'color' => ['rgb' => 'FFFFFF'],
            'size' => 12,
        ],
        'fill' => [
            'fillType' => \PhpOffice\PhpSpreadsheet\Style\Fill::FILL_SOLID,
            'startColor' => ['rgb' => '2563EB'], // Blue
        ],
        'borders' => [
            'allBorders' => [
                'borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN,
                'color' => ['rgb' => '000000'],
            ],
        ],
        'alignment' => [
            'horizontal' => \PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER,
            'vertical' => \PhpOffice\PhpSpreadsheet\Style\Alignment::VERTICAL_CENTER,
        ],
    ];

    // Style for data rows
    $dataStyle = [
        'borders' => [
            'allBorders' => [
                'borderStyle' => \PhpOffice\PhpSpreadsheet\Style\Border::BORDER_THIN,
                'color' => ['rgb' => 'CCCCCC'],
            ],
        ],
        'alignment' => [
            'vertical' => \PhpOffice\PhpSpreadsheet\Style\Alignment::VERTICAL_TOP,
        ],
    ];

    // Header row
    $colIndex = 'A';
    foreach ($headers as $header) {
        $sheet->setCellValue($colIndex . '1', $header);
        $colIndex++;
    }

    // Apply header style
    $sheet->getStyle('A1:' . $sheet->getHighestColumn() . '1')->applyFromArray($headerStyle);

    // Data rows
    $rowNum = 2;
    foreach ($data as $row) {
        $colIndex = 'A';
        foreach ($headers as $header) {
            $key = strtolower(str_replace(' ', '_', $header));
            $value = isset($row[$key]) ? $row[$key] : '';

            // Set cell value
            $sheet->setCellValue($colIndex . $rowNum, $value);

            // Special formatting for status and priority columns
            if ($header === 'Status') {
                $statusColors = [
                    'resolved' => '22C55E',     // Green
                    'pending' => 'F59E0B',      // Yellow
                    'in_progress' => '3B82F6',  // Blue
                    'rejected' => 'EF4444',     // Red
                ];
                $statusKey = strtolower(str_replace(' ', '_', $value));
                if (isset($statusColors[$statusKey])) {
                    $sheet->getStyle($colIndex . $rowNum)->getFont()->getColor()->setRGB($statusColors[$statusKey]);
                    $sheet->getStyle($colIndex . $rowNum)->getFont()->setBold(true);
                }
            } elseif ($header === 'Priority') {
                $priorityColors = [
                    'emergency' => 'DC2626',   // Red
                    'high' => 'EA580C',        // Orange
                    'medium' => 'D97706',      // Amber
                    'low' => '65A30D',         // Green
                ];
                if (isset($priorityColors[strtolower($value)])) {
                    $sheet->getStyle($colIndex . $rowNum)->getFont()->getColor()->setRGB($priorityColors[strtolower($value)]);
                    $sheet->getStyle($colIndex . $rowNum)->getFont()->setBold(true);
                }
            }

            $colIndex++;
        }
        $rowNum++;
    }

    // Apply data style to all data cells
    if (count($data) > 0) {
        $lastRow = $rowNum - 1;
        $sheet->getStyle('A2:' . $sheet->getHighestColumn() . $lastRow)->applyFromArray($dataStyle);
    }

    // Auto-size columns
    foreach (range('A', $sheet->getHighestColumn()) as $col) {
        $sheet->getColumnDimension($col)->setAutoSize(true);
    }

    // Set row height for header
    $sheet->getRowDimension(1)->setRowHeight(25);

    // Add title and metadata
    $sheet->insertNewRowBefore(1, 3);
    $sheet->mergeCells('A1:' . $sheet->getHighestColumn() . '1');
    $sheet->setCellValue('A1', 'HazardTrack System - Data Export');
    $sheet->getStyle('A1')->getFont()->setSize(16)->setBold(true);
    $sheet->getStyle('A1')->getAlignment()->setHorizontal(\PhpOffice\PhpSpreadsheet\Style\Alignment::HORIZONTAL_CENTER);

    $sheet->setCellValue('A2', 'Generated on: ' . date('F j, Y \a\t g:i A'));
    $sheet->setCellValue('A3', 'Total Records: ' . count($data));
    $sheet->getStyle('A2:A3')->getFont()->setItalic(true)->getColor()->setRGB('666666');

    // Output to browser
    header('Content-Type: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    header('Content-Disposition: attachment; filename="' . $filename . '.xlsx"');
    header('Cache-Control: max-age=0');

    $writer = new \PhpOffice\PhpSpreadsheet\Writer\Xlsx($spreadsheet);
    $writer->save('php://output');
    exit;
}

function generatePDF($data, $headers, $title, $filename) {
    require '../vendor/autoload.php';

    $options = new \Dompdf\Options();
    $options->set('isHtml5ParserEnabled', true);
    $options->set('isRemoteEnabled', true);
    $options->set('defaultFont', 'Arial');
    $dompdf = new \Dompdf\Dompdf($options);

    $currentDate = date('F j, Y');
    $totalRecords = count($data);

    $html = '<!DOCTYPE html>
    <html>
    <head>
        <meta charset="utf-8">
        <title>' . htmlspecialchars($title) . '</title>
        <style>
            @page {
                margin: 1in;
                @bottom-center {
                    content: "Page " counter(page) " of " counter(pages);
                    font-size: 10px;
                    color: #666;
                }
            }
            body {
                font-family: Arial, sans-serif;
                font-size: 10px;
                line-height: 1.4;
                color: #333;
            }
            .header {
                text-align: center;
                border-bottom: 2px solid #2563eb;
                padding-bottom: 10px;
                margin-bottom: 20px;
            }
            .header h1 {
                color: #2563eb;
                margin: 0;
                font-size: 18px;
                font-weight: bold;
            }
            .header .subtitle {
                color: #666;
                font-size: 12px;
                margin: 5px 0;
            }
            .header .meta {
                color: #888;
                font-size: 9px;
                margin-top: 5px;
            }
            table {
                width: 100%;
                border-collapse: collapse;
                margin-top: 15px;
                font-size: 9px;
            }
            th {
                background-color: #2563eb;
                color: white;
                padding: 8px 4px;
                text-align: left;
                font-weight: bold;
                border: 1px solid #ddd;
                white-space: nowrap;
            }
            td {
                padding: 6px 4px;
                border: 1px solid #ddd;
                vertical-align: top;
            }
            tr:nth-child(even) {
                background-color: #f8f9fa;
            }
            tr:hover {
                background-color: #e3f2fd;
            }
            .footer {
                margin-top: 20px;
                padding-top: 10px;
                border-top: 1px solid #ddd;
                text-align: center;
                font-size: 8px;
                color: #666;
            }
            .status-resolved { color: #22c55e; font-weight: bold; }
            .status-pending { color: #f59e0b; font-weight: bold; }
            .status-in_progress { color: #3b82f6; font-weight: bold; }
            .status-rejected { color: #ef4444; font-weight: bold; }
            .priority-emergency { color: #dc2626; font-weight: bold; }
            .priority-high { color: #ea580c; font-weight: bold; }
            .priority-medium { color: #d97706; font-weight: bold; }
            .priority-low { color: #65a30d; font-weight: bold; }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>HazardTrack System</h1>
            <div class="subtitle">' . htmlspecialchars($title) . '</div>
            <div class="meta">
                Generated on: ' . $currentDate . ' | Total Records: ' . $totalRecords . '
            </div>
        </div>

        <table>
            <thead>
                <tr>';

    foreach ($headers as $header) {
        $html .= '<th>' . htmlspecialchars($header) . '</th>';
    }

    $html .= '</tr>
            </thead>
            <tbody>';

    foreach ($data as $row) {
        $html .= '<tr>';
        foreach ($headers as $header) {
            $key = strtolower(str_replace(' ', '_', $header));
            $value = isset($row[$key]) ? $row[$key] : '';

            // Add status styling
            if ($header === 'Status' && !empty($value)) {
                $statusClass = 'status-' . strtolower(str_replace(' ', '_', $value));
                $html .= '<td class="' . $statusClass . '">' . htmlspecialchars($value) . '</td>';
            }
            // Add priority styling
            elseif ($header === 'Priority' && !empty($value)) {
                $priorityClass = 'priority-' . strtolower($value);
                $html .= '<td class="' . $priorityClass . '">' . htmlspecialchars($value) . '</td>';
            }
            else {
                $html .= '<td>' . htmlspecialchars($value) . '</td>';
            }
        }
        $html .= '</tr>';
    }

    $html .= '</tbody>
        </table>

        <div class="footer">
            This report was generated by the HazardTrack System. Confidential - For Official Use Only.
        </div>
    </body>
    </html>';

    $dompdf->loadHtml($html);
    $dompdf->setPaper('A4', 'landscape');
    $dompdf->render();

    $dompdf->stream($filename . ".pdf", ["Attachment" => true]);
    exit;
}

/* ---------------------- MAIN PROCESSING ---------------------- */

try {
    $type = $_GET['type'] ?? 'reports';
    $range = $_GET['range'] ?? '30d';
    $format = $_GET['format'] ?? 'excel';
    $status = $_GET['status'] ?? '';
    $hazardType = $_GET['hazardType'] ?? '';
    $barangay = $_GET['barangay'] ?? '';
    $priority = $_GET['priority'] ?? '';

    // Build date condition
    $dateCondition = "";
    switch ($range) {
        case '7d':  $dateCondition = "AND r.created_at >= DATE_SUB(NOW(), INTERVAL 7 DAY)"; break;
        case '30d': $dateCondition = "AND r.created_at >= DATE_SUB(NOW(), INTERVAL 30 DAY)"; break;
        case '90d': $dateCondition = "AND r.created_at >= DATE_SUB(NOW(), INTERVAL 90 DAY)"; break;
        case '1y':  $dateCondition = "AND r.created_at >= DATE_SUB(NOW(), INTERVAL 1 YEAR)"; break;
    }

    // Build dynamic filters
    $filters = [];
    if ($status) $filters[] = "r.status = '" . $conn->real_escape_string($status) . "'";
    if ($hazardType) $filters[] = "c.name = '" . $conn->real_escape_string($hazardType) . "'";
    if ($priority) $filters[] = "r.priority = '" . $conn->real_escape_string($priority) . "'";

    $filterCondition = !empty($filters) ? "AND " . implode(" AND ", $filters) : "";

    /* ---------------------- EXPORT HANDLERS ---------------------- */

    if ($type === 'reports') {
        $query = "SELECT r.id, r.title, r.description, r.status, r.priority,
                         c.name AS hazard_type, r.location_address AS barangay, u.fullname AS reporter,
                         r.created_at, r.updated_at
                  FROM hazard_reports r
                  LEFT JOIN users u ON r.user_id = u.id
                  LEFT JOIN categories c ON r.category_id = c.id
                  WHERE 1=1 $dateCondition $filterCondition
                  ORDER BY r.created_at DESC";

        $result = $conn->query($query);
        if (!$result) {
            throw new Exception("Query failed: " . $conn->error);
        }
        $data = [];
        while ($row = $result->fetch_assoc()) {
            $data[] = $row;
        }

        $headers = ['ID', 'Title', 'Description', 'Status', 'Priority', 'Hazard Type', 'Barangay', 'Reporter', 'Created At', 'Updated At'];
        $filename = 'hazard_reports_' . date('Y-m-d');

        if ($format === 'csv') {
            header('Content-Type: text/csv');
            header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
            echo generateCSV($data, $headers);
        } elseif ($format === 'excel') {
            generateExcel($data, $headers, $filename);
        } elseif ($format === 'pdf') {
            generatePDF($data, $headers, 'Hazard Reports Export', $filename);
        }
        exit;
    }

    elseif ($type === 'analytics') {
        $analyticsData = [
            'totalReports' => 0,
            'resolvedReports' => 0,
            'reportsByBarangay' => [],
            'reportsByHazardType' => []
        ];

        $analyticsDateCondition = str_replace('r.', '', $dateCondition);

        $result = $conn->query("SELECT COUNT(*) AS count FROM hazard_reports WHERE 1=1 $analyticsDateCondition");
        if (!$result) throw new Exception("Query failed: " . $conn->error);
        $analyticsData['totalReports'] = $result->fetch_assoc()['count'] ?? 0;

        $result = $conn->query("SELECT COUNT(*) AS count FROM hazard_reports WHERE status='resolved' $analyticsDateCondition");
        if (!$result) throw new Exception("Query failed: " . $conn->error);
        $analyticsData['resolvedReports'] = $result->fetch_assoc()['count'] ?? 0;

        $result = $conn->query("SELECT location_address AS barangay, COUNT(*) AS count FROM hazard_reports WHERE 1=1 $analyticsDateCondition GROUP BY location_address ORDER BY count DESC");
        if (!$result) throw new Exception("Query failed: " . $conn->error);
        while ($row = $result->fetch_assoc()) $analyticsData['reportsByBarangay'][] = $row;

        $result = $conn->query("SELECT c.name AS hazard_type, COUNT(*) AS count FROM hazard_reports r LEFT JOIN categories c ON r.category_id = c.id WHERE 1=1 $dateCondition GROUP BY c.name ORDER BY count DESC");
        if (!$result) throw new Exception("Query failed: " . $conn->error);
        while ($row = $result->fetch_assoc()) $analyticsData['reportsByHazardType'][] = $row;

        $headers = ['Category', 'Name', 'Count'];
        $filename = 'analytics_export_' . date('Y-m-d');

        $exportData = [];
        foreach ($analyticsData['reportsByHazardType'] as $item)
            $exportData[] = ['category' => 'Hazard Type', 'name' => $item['hazard_type'], 'count' => $item['count']];
        foreach ($analyticsData['reportsByBarangay'] as $item)
            $exportData[] = ['category' => 'Barangay', 'name' => $item['barangay'], 'count' => $item['count']];

        if ($format === 'csv') {
            header('Content-Type: text/csv');
            header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
            echo generateCSV($exportData, $headers);
        } elseif ($format === 'excel') {
            generateExcel($exportData, $headers, $filename);
        } elseif ($format === 'pdf') {
            generatePDF($exportData, $headers, 'Analytics Export', $filename);
        }
        exit;
    }

    elseif ($type === 'users') {
        $result = $conn->query("SELECT id, fullname, email, role, is_active, created_at FROM users ORDER BY created_at DESC");
        $data = [];
        while ($row = $result->fetch_assoc()) $data[] = $row;

        $headers = ['ID', 'Full Name', 'Email', 'Role', 'Active', 'Created At'];
        $filename = 'users_export_' . date('Y-m-d');

        if ($format === 'csv') {
            header('Content-Type: text/csv');
            header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
            echo generateCSV($data, $headers);
        } elseif ($format === 'excel') {
            generateExcel($data, $headers, $filename);
        } elseif ($format === 'pdf') {
            generatePDF($data, $headers, 'Users Export', $filename);
        }
        exit;
    }

    elseif ($type === 'audit') {
        $auditDateCondition = str_replace('r.', 'sh.', $dateCondition);
        $query = "SELECT sh.id, u.fullname AS user_name, hr.title AS report_title, sh.old_status, sh.new_status,
                         sh.changed_by, sh.change_note, sh.created_at
                  FROM status_history sh
                  LEFT JOIN users u ON sh.changed_by = u.id
                  LEFT JOIN hazard_reports hr ON sh.report_id = hr.id
                  WHERE 1=1 $auditDateCondition
                  ORDER BY sh.created_at DESC";
        $result = $conn->query($query);
        if (!$result) {
            throw new Exception("Query failed: " . $conn->error);
        }

        $data = [];
        while ($row = $result->fetch_assoc()) $data[] = $row;

        $headers = ['ID', 'User Name', 'Report Title', 'Old Status', 'New Status', 'Changed By', 'Change Note', 'Created At'];
        $filename = 'status_history_' . date('Y-m-d');

        if ($format === 'csv') {
            header('Content-Type: text/csv');
            header('Content-Disposition: attachment; filename="' . $filename . '.csv"');
            echo generateCSV($data, $headers);
        } elseif ($format === 'excel') {
            generateExcel($data, $headers, $filename);
        } elseif ($format === 'pdf') {
            generatePDF($data, $headers, 'Status History Export', $filename);
        }
        exit;
    }

    else {
        http_response_code(400);
        echo json_encode(['status' => 'error', 'message' => 'Invalid export type']);
    }

} catch (Exception $e) {
    http_response_code(500);
    echo json_encode([
        'status' => 'error',
        'message' => 'Server error: ' . $e->getMessage()
    ]);
}
?>
